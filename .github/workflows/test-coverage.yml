name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.9.0
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Cache pnpm dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install
      
    - name: Run linting
      run: pnpm run lint || echo "Linting not configured, skipping..."
      continue-on-error: true
      
    - name: Run tests with coverage
      run: pnpm run test:ci
      env:
        CI: true
        
    - name: Check coverage thresholds
      run: |
        echo "Checking if coverage meets 90% threshold..."
        # Coverage check is handled by Jest configuration
        
    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload coverage to GitHub
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20.x'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/
        
  coverage-check:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.9.0
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Download coverage reports
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: coverage/
        
    - name: Comment coverage on PR
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Read coverage summary
            const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
            
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const total = coverage.total;
              
              const coverageComment = `
              ## üìä Test Coverage Report
              
              | Metric | Coverage | Status |
              |--------|----------|---------|
              | Lines | ${total.lines.pct}% | ${total.lines.pct >= 90 ? '‚úÖ' : '‚ùå'} |
              | Branches | ${total.branches.pct}% | ${total.branches.pct >= 90 ? '‚úÖ' : '‚ùå'} |
              | Functions | ${total.functions.pct}% | ${total.functions.pct >= 90 ? '‚úÖ' : '‚ùå'} |
              | Statements | ${total.statements.pct}% | ${total.statements.pct >= 90 ? '‚úÖ' : '‚ùå'} |
              
              **Overall Status:** ${
                total.lines.pct >= 90 && 
                total.branches.pct >= 90 && 
                total.functions.pct >= 90 && 
                total.statements.pct >= 90 
                  ? '‚úÖ All coverage thresholds met!' 
                  : '‚ùå Some coverage thresholds not met'
              }
              
              ---
              *Coverage target: ‚â•90% for all metrics*
              `;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: coverageComment
              });
            }
          } catch (error) {
            console.error('Error posting coverage comment:', error);
          }
          
  build-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.9.0
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build application
      run: pnpm run build
      
    - name: Test built application
      run: |
        echo "Testing built application structure..."
        ls -la dist/
        
        # Check if critical files exist
        if [ ! -f "dist/index.html" ]; then
          echo "‚ùå index.html not found in dist/"
          exit 1
        fi
        
        echo "‚úÖ Build test completed successfully"
        
  security-audit:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.9.0
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Run security audit
      run: |
        pnpm audit --audit-level moderate || echo "Security audit found issues, but continuing..."
        
    - name: Check for known vulnerabilities
      run: |
        echo "Checking for known security vulnerabilities..."
        # Add additional security checks here if needed
        
  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.9.0
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Run performance tests
      run: |
        echo "Running performance benchmarks..."
        pnpm run benchmark || echo "No benchmark script configured"
        
    - name: Test startup performance
      run: |
        echo "Testing application startup performance..."
        time pnpm run build
        
  notify-status:
    runs-on: ubuntu-latest
    needs: [test, coverage-check, build-test, security-audit, performance-test]
    if: always()
    
    steps:
    - name: Check overall status
      run: |
        echo "=== Test Suite Summary ==="
        echo "Tests: ${{ needs.test.result }}"
        echo "Coverage: ${{ needs.coverage-check.result }}"
        echo "Build: ${{ needs.build-test.result }}"
        echo "Security: ${{ needs.security-audit.result }}"
        echo "Performance: ${{ needs.performance-test.result }}"
        
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "‚ùå Tests failed"
          exit 1
        fi
        
        if [ "${{ needs.build-test.result }}" != "success" ]; then
          echo "‚ùå Build tests failed"
          exit 1
        fi
        
        echo "‚úÖ All critical checks passed"